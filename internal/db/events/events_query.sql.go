// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: events_query.sql

package events

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createEvent = `-- name: CreateEvent :exec

INSERT INTO
    events (name, description, date)
VALUES ($1, $2, $3) RETURNING id
`

type CreateEventParams struct {
	Name        string
	Description string
	Date        time.Time
}

func (q *Queries) CreateEvent(ctx context.Context, arg CreateEventParams) error {
	_, err := q.db.ExecContext(ctx, createEvent, arg.Name, arg.Description, arg.Date)
	return err
}

const deleteEvent = `-- name: DeleteEvent :exec

DELETE FROM events WHERE id = $1
`

func (q *Queries) DeleteEvent(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteEvent, id)
	return err
}

const getEvent = `-- name: GetEvent :one

SELECT id, name, description, date FROM events WHERE id = $1 LIMIT 1
`

func (q *Queries) GetEvent(ctx context.Context, id uuid.UUID) (Event, error) {
	row := q.db.QueryRowContext(ctx, getEvent, id)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Date,
	)
	return i, err
}

const getEvents = `-- name: GetEvents :many

SELECT id, name, description, date FROM events ORDER BY id LIMIT $1 OFFSET $2
`

type GetEventsParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) GetEvents(ctx context.Context, arg GetEventsParams) ([]Event, error) {
	rows, err := q.db.QueryContext(ctx, getEvents, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Event
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Date,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEvent = `-- name: UpdateEvent :exec

UPDATE events
SET
    name = $1,
    description = $2,
    date = $3
WHERE id = $4
`

type UpdateEventParams struct {
	Name        string
	Description string
	Date        time.Time
	ID          uuid.UUID
}

func (q *Queries) UpdateEvent(ctx context.Context, arg UpdateEventParams) error {
	_, err := q.db.ExecContext(ctx, updateEvent,
		arg.Name,
		arg.Description,
		arg.Date,
		arg.ID,
	)
	return err
}
