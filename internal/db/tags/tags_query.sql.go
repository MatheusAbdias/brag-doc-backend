// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: tags_query.sql

package tags

import (
	"context"

	"github.com/google/uuid"
)

const createTag = `-- name: CreateTag :exec

INSERT INTO tags (name) VALUES ($1) RETURNING id, name
`

func (q *Queries) CreateTag(ctx context.Context, name string) error {
	_, err := q.db.ExecContext(ctx, createTag, name)
	return err
}

const deleteUser = `-- name: DeleteUser :exec

DELETE FROM tags WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getTag = `-- name: GetTag :one

SELECT id, name FROM tags WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTag(ctx context.Context, id uuid.UUID) (Tag, error) {
	row := q.db.QueryRowContext(ctx, getTag, id)
	var i Tag
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getTags = `-- name: GetTags :many

SELECT id, name FROM tags ORDER BY id LIMIT $1 OFFSET $2
`

type GetTagsParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) GetTags(ctx context.Context, arg GetTagsParams) ([]Tag, error) {
	rows, err := q.db.QueryContext(ctx, getTags, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tag
	for rows.Next() {
		var i Tag
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTag = `-- name: UpdateTag :exec

UPDATE tags SET name = $1 WHERE id = $2
`

type UpdateTagParams struct {
	Name string
	ID   uuid.UUID
}

func (q *Queries) UpdateTag(ctx context.Context, arg UpdateTagParams) error {
	_, err := q.db.ExecContext(ctx, updateTag, arg.Name, arg.ID)
	return err
}
